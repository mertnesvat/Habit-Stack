//
// This is a generated file, do not edit!
// Generated by R.swift, see https://github.com/mac-cain13/R.swift
//

import Foundation
import Rswift
import UIKit

/// This `R` struct is generated and contains references to static resources.
struct R: Rswift.Validatable {
  fileprivate static let applicationLocale = hostingBundle.preferredLocalizations.first.flatMap(Locale.init) ?? Locale.current
  fileprivate static let hostingBundle = Bundle(for: R.Class.self)
  
  static func validate() throws {
    try font.validate()
    try intern.validate()
  }
  
  /// This `R.file` struct is generated, and contains static references to 1 files.
  struct file {
    /// Resource file `GoogleService-Info.plist`.
    static let googleServiceInfoPlist = Rswift.FileResource(bundle: R.hostingBundle, name: "GoogleService-Info", pathExtension: "plist")
    
    /// `bundle.url(forResource: "GoogleService-Info", withExtension: "plist")`
    static func googleServiceInfoPlist(_: Void = ()) -> Foundation.URL? {
      let fileResource = R.file.googleServiceInfoPlist
      return fileResource.bundle.url(forResource: fileResource)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.font` struct is generated, and contains static references to 12 fonts.
  struct font: Rswift.Validatable {
    /// Font `AvenirNextCondensed-BoldItalic`.
    static let avenirNextCondensedBoldItalic = Rswift.FontResource(fontName: "AvenirNextCondensed-BoldItalic")
    /// Font `AvenirNextCondensed-Bold`.
    static let avenirNextCondensedBold = Rswift.FontResource(fontName: "AvenirNextCondensed-Bold")
    /// Font `AvenirNextCondensed-DemiBoldItalic`.
    static let avenirNextCondensedDemiBoldItalic = Rswift.FontResource(fontName: "AvenirNextCondensed-DemiBoldItalic")
    /// Font `AvenirNextCondensed-DemiBold`.
    static let avenirNextCondensedDemiBold = Rswift.FontResource(fontName: "AvenirNextCondensed-DemiBold")
    /// Font `AvenirNextCondensed-HeavyItalic`.
    static let avenirNextCondensedHeavyItalic = Rswift.FontResource(fontName: "AvenirNextCondensed-HeavyItalic")
    /// Font `AvenirNextCondensed-Heavy`.
    static let avenirNextCondensedHeavy = Rswift.FontResource(fontName: "AvenirNextCondensed-Heavy")
    /// Font `AvenirNextCondensed-Italic`.
    static let avenirNextCondensedItalic = Rswift.FontResource(fontName: "AvenirNextCondensed-Italic")
    /// Font `AvenirNextCondensed-MediumItalic`.
    static let avenirNextCondensedMediumItalic = Rswift.FontResource(fontName: "AvenirNextCondensed-MediumItalic")
    /// Font `AvenirNextCondensed-Medium`.
    static let avenirNextCondensedMedium = Rswift.FontResource(fontName: "AvenirNextCondensed-Medium")
    /// Font `AvenirNextCondensed-Regular`.
    static let avenirNextCondensedRegular = Rswift.FontResource(fontName: "AvenirNextCondensed-Regular")
    /// Font `AvenirNextCondensed-UltraLightItalic`.
    static let avenirNextCondensedUltraLightItalic = Rswift.FontResource(fontName: "AvenirNextCondensed-UltraLightItalic")
    /// Font `AvenirNextCondensed-UltraLight`.
    static let avenirNextCondensedUltraLight = Rswift.FontResource(fontName: "AvenirNextCondensed-UltraLight")
    
    /// `UIFont(name: "AvenirNextCondensed-Bold", size: ...)`
    static func avenirNextCondensedBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedBold, size: size)
    }
    
    /// `UIFont(name: "AvenirNextCondensed-BoldItalic", size: ...)`
    static func avenirNextCondensedBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedBoldItalic, size: size)
    }
    
    /// `UIFont(name: "AvenirNextCondensed-DemiBold", size: ...)`
    static func avenirNextCondensedDemiBold(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedDemiBold, size: size)
    }
    
    /// `UIFont(name: "AvenirNextCondensed-DemiBoldItalic", size: ...)`
    static func avenirNextCondensedDemiBoldItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedDemiBoldItalic, size: size)
    }
    
    /// `UIFont(name: "AvenirNextCondensed-Heavy", size: ...)`
    static func avenirNextCondensedHeavy(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedHeavy, size: size)
    }
    
    /// `UIFont(name: "AvenirNextCondensed-HeavyItalic", size: ...)`
    static func avenirNextCondensedHeavyItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedHeavyItalic, size: size)
    }
    
    /// `UIFont(name: "AvenirNextCondensed-Italic", size: ...)`
    static func avenirNextCondensedItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedItalic, size: size)
    }
    
    /// `UIFont(name: "AvenirNextCondensed-Medium", size: ...)`
    static func avenirNextCondensedMedium(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedMedium, size: size)
    }
    
    /// `UIFont(name: "AvenirNextCondensed-MediumItalic", size: ...)`
    static func avenirNextCondensedMediumItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedMediumItalic, size: size)
    }
    
    /// `UIFont(name: "AvenirNextCondensed-Regular", size: ...)`
    static func avenirNextCondensedRegular(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedRegular, size: size)
    }
    
    /// `UIFont(name: "AvenirNextCondensed-UltraLight", size: ...)`
    static func avenirNextCondensedUltraLight(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedUltraLight, size: size)
    }
    
    /// `UIFont(name: "AvenirNextCondensed-UltraLightItalic", size: ...)`
    static func avenirNextCondensedUltraLightItalic(size: CGFloat) -> UIKit.UIFont? {
      return UIKit.UIFont(resource: avenirNextCondensedUltraLightItalic, size: size)
    }
    
    static func validate() throws {
      if R.font.avenirNextCondensedBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-Bold' could not be loaded, is 'AvenirNextCondensed-Bold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirNextCondensedBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-BoldItalic' could not be loaded, is 'AvenirNextCondensed-BoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirNextCondensedDemiBold(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-DemiBold' could not be loaded, is 'AvenirNextCondensed-DemiBold.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirNextCondensedDemiBoldItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-DemiBoldItalic' could not be loaded, is 'AvenirNextCondensed-DemiBoldItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirNextCondensedHeavy(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-Heavy' could not be loaded, is 'AvenirNextCondensed-Heavy.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirNextCondensedHeavyItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-HeavyItalic' could not be loaded, is 'AvenirNextCondensed-HeavyItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirNextCondensedItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-Italic' could not be loaded, is 'AvenirNextCondensed-Italic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirNextCondensedMedium(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-Medium' could not be loaded, is 'AvenirNextCondensed-Medium.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirNextCondensedMediumItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-MediumItalic' could not be loaded, is 'AvenirNextCondensed-MediumItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirNextCondensedRegular(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-Regular' could not be loaded, is 'AvenirNextCondensed-Regular.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirNextCondensedUltraLight(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-UltraLight' could not be loaded, is 'AvenirNextCondensed-UltraLight.ttf' added to the UIAppFonts array in this targets Info.plist?") }
      if R.font.avenirNextCondensedUltraLightItalic(size: 42) == nil { throw Rswift.ValidationError(description:"[R.swift] Font 'AvenirNextCondensed-UltraLightItalic' could not be loaded, is 'AvenirNextCondensed-UltraLightItalic.ttf' added to the UIAppFonts array in this targets Info.plist?") }
    }
    
    fileprivate init() {}
  }
  
  /// This `R.image` struct is generated, and contains static references to 10 images.
  struct image {
    /// Image `BG_reversed`.
    static let bg_reversed = Rswift.ImageResource(bundle: R.hostingBundle, name: "BG_reversed")
    /// Image `BG`.
    static let bG = Rswift.ImageResource(bundle: R.hostingBundle, name: "BG")
    /// Image `addIcon`.
    static let addIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "addIcon")
    /// Image `buttonBG`.
    static let buttonBG = Rswift.ImageResource(bundle: R.hostingBundle, name: "buttonBG")
    /// Image `clock`.
    static let clock = Rswift.ImageResource(bundle: R.hostingBundle, name: "clock")
    /// Image `habitsIcon`.
    static let habitsIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "habitsIcon")
    /// Image `noWords`.
    static let noWords = Rswift.ImageResource(bundle: R.hostingBundle, name: "noWords")
    /// Image `todayIcon`.
    static let todayIcon = Rswift.ImageResource(bundle: R.hostingBundle, name: "todayIcon")
    /// Image `wsAdd`.
    static let wsAdd = Rswift.ImageResource(bundle: R.hostingBundle, name: "wsAdd")
    /// Image `wsAdder`.
    static let wsAdder = Rswift.ImageResource(bundle: R.hostingBundle, name: "wsAdder")
    
    /// `UIImage(named: "BG", bundle: ..., traitCollection: ...)`
    static func bG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "BG_reversed", bundle: ..., traitCollection: ...)`
    static func bg_reversed(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.bg_reversed, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "addIcon", bundle: ..., traitCollection: ...)`
    static func addIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.addIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "buttonBG", bundle: ..., traitCollection: ...)`
    static func buttonBG(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.buttonBG, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "clock", bundle: ..., traitCollection: ...)`
    static func clock(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.clock, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "habitsIcon", bundle: ..., traitCollection: ...)`
    static func habitsIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.habitsIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "noWords", bundle: ..., traitCollection: ...)`
    static func noWords(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.noWords, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "todayIcon", bundle: ..., traitCollection: ...)`
    static func todayIcon(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.todayIcon, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wsAdd", bundle: ..., traitCollection: ...)`
    static func wsAdd(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wsAdd, compatibleWith: traitCollection)
    }
    
    /// `UIImage(named: "wsAdder", bundle: ..., traitCollection: ...)`
    static func wsAdder(compatibleWith traitCollection: UIKit.UITraitCollection? = nil) -> UIKit.UIImage? {
      return UIKit.UIImage(resource: R.image.wsAdder, compatibleWith: traitCollection)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.storyboard` struct is generated, and contains static references to 2 storyboards.
  struct storyboard {
    /// Storyboard `LaunchScreen`.
    static let launchScreen = _R.storyboard.launchScreen()
    /// Storyboard `Main`.
    static let main = _R.storyboard.main()
    
    /// `UIStoryboard(name: "LaunchScreen", bundle: ...)`
    static func launchScreen(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.launchScreen)
    }
    
    /// `UIStoryboard(name: "Main", bundle: ...)`
    static func main(_: Void = ()) -> UIKit.UIStoryboard {
      return UIKit.UIStoryboard(resource: R.storyboard.main)
    }
    
    fileprivate init() {}
  }
  
  /// This `R.string` struct is generated, and contains static references to 1 localization tables.
  struct string {
    /// This `R.string.key` struct is generated, and contains static references to 3 localization keys.
    struct key {
      /// Value: Habits
      static let habits = Rswift.StringResource(key: "habits", tableName: "key", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Today
      static let today = Rswift.StringResource(key: "today", tableName: "key", bundle: R.hostingBundle, locales: [], comment: nil)
      /// Value: Welcome to the Habit Stack
      static let welcomeMessage = Rswift.StringResource(key: "welcomeMessage", tableName: "key", bundle: R.hostingBundle, locales: [], comment: nil)
      
      /// Value: Habits
      static func habits(_: Void = ()) -> String {
        return NSLocalizedString("habits", tableName: "key", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Today
      static func today(_: Void = ()) -> String {
        return NSLocalizedString("today", tableName: "key", bundle: R.hostingBundle, comment: "")
      }
      
      /// Value: Welcome to the Habit Stack
      static func welcomeMessage(_: Void = ()) -> String {
        return NSLocalizedString("welcomeMessage", tableName: "key", bundle: R.hostingBundle, comment: "")
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate struct intern: Rswift.Validatable {
    fileprivate static func validate() throws {
      try _R.validate()
    }
    
    fileprivate init() {}
  }
  
  fileprivate class Class {}
  
  fileprivate init() {}
}

struct _R: Rswift.Validatable {
  static func validate() throws {
    try storyboard.validate()
  }
  
  struct storyboard: Rswift.Validatable {
    static func validate() throws {
      try launchScreen.validate()
      try main.validate()
    }
    
    struct launchScreen: Rswift.StoryboardResourceWithInitialControllerType, Rswift.Validatable {
      typealias InitialController = UIKit.UIViewController
      
      let bundle = R.hostingBundle
      let name = "LaunchScreen"
      
      static func validate() throws {
        if #available(iOS 11.0, *) {
        }
      }
      
      fileprivate init() {}
    }
    
    struct main: Rswift.StoryboardResourceType, Rswift.Validatable {
      let bundle = R.hostingBundle
      let name = "Main"
      let storyLogin = StoryboardViewControllerResource<UIKit.UINavigationController>(identifier: "storyLogin")
      let storyTab = StoryboardViewControllerResource<MainTabViewController>(identifier: "storyTab")
      
      func storyLogin(_: Void = ()) -> UIKit.UINavigationController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storyLogin)
      }
      
      func storyTab(_: Void = ()) -> MainTabViewController? {
        return UIKit.UIStoryboard(resource: self).instantiateViewController(withResource: storyTab)
      }
      
      static func validate() throws {
        if UIKit.UIImage(named: "BG", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BG' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "BG_reversed", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'BG_reversed' is used in storyboard 'Main', but couldn't be loaded.") }
        if UIKit.UIImage(named: "clock", in: R.hostingBundle, compatibleWith: nil) == nil { throw Rswift.ValidationError(description: "[R.swift] Image named 'clock' is used in storyboard 'Main', but couldn't be loaded.") }
        if #available(iOS 11.0, *) {
        }
        if _R.storyboard.main().storyLogin() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storyLogin' could not be loaded from storyboard 'Main' as 'UIKit.UINavigationController'.") }
        if _R.storyboard.main().storyTab() == nil { throw Rswift.ValidationError(description:"[R.swift] ViewController with identifier 'storyTab' could not be loaded from storyboard 'Main' as 'MainTabViewController'.") }
      }
      
      fileprivate init() {}
    }
    
    fileprivate init() {}
  }
  
  fileprivate init() {}
}
